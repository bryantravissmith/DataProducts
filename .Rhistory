library("nnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("splines", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
k <- kmeans(train[,1:2], 3)
plot(train[,1:2], type='n')
text(train[,1:2], as.character(k$cluster))
cm (train$class, k$cluster)
read.csv("http://finance.yahoo.com/d/quotes.csv?s=AMD+ANV+BBRY+BLDP+CSLT+DDD+DRYS+FEYE+FIO+FSLR+GOGO+GRPN+GTAT+HIMX+INVN+JCP+KING+KNDI+P+PLUG+QIHU+SCTY+SPWR+SSYS+SUNE+TRLA+TSLA+TWTR+UBNT+WLT+XONE+YELP&f=sl")
install.packages("animation")
demo(animation)
oopt = ani.options(interval = 2)
library(animation)
oopt = ani.options(interval = 2)
par(mar = c(3, 3, 1, 1.5), mgp = c(1.5, 0.5, 0))
kmeans.ani()
x = rbind(matrix(rnorm(100, sd = 0.3), ncol = 2), matrix(rnorm(100, mean = 1, sd = 0.3),
ncol = 2))
colnames(x) = c("x", "y")
kmeans.ani(x, centers = 2)
## what if we cluster them into 3 groups?
kmeans.ani(x, centers = 3)
## create an HTML animation page
saveHTML({
ani.options(interval = 2)
par(mar = c(3, 3, 1, 1.5), mgp = c(1.5, 0.5, 0))
cent = 1.5 * c(1, 1, -1, -1, 1, -1, 1, -1)
x = NULL
for (i in 1:8) x = c(x, rnorm(25, mean = cent[i]))
x = matrix(x, ncol = 2)
colnames(x) = c("X1", "X2")
kmeans.ani(x, centers = 4, pch = 1:4, col = 1:4)
}, img.name = "kmeans.ani", htmlfile = "kmeans.ani.html", ani.height = 480, ani.width = 480,
title = "Demonstration of the K-means Cluster Algorithm", description = "Move! Average! Cluster! Move! Average! Cluster! ...")
ani.options(oopt)
library(animation)
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
col.range <- heat.colors(15)
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:150) {
# Pull 100 observations from a normal distribution
# and add a constant based on the iteration to move the distribution
chunk <- rnorm(100)+sqrt(abs((i)-51))
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
# Dress it up a little just for fun
plot(-5, xlim = c(1,150), ylim = c(0, .3), axes = F, xlab = “”, ylab = “”, main = “Iteration”)
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set the color of the bottom chart based on the distance of the distribution’s mean from 0
par(fg = col.range[mean(chunk)+3])
# Set up the bottom chart
plot(density(chunk), main = “”, xlab = “X Value”, xlim = c(-5, 15), ylim = c(0, .6))
# Add a line that indicates the mean of the distribution. Add additional lines to track
# previous means
abline(v=mean(chunk), col = rgb(255, 0, 0, 255, maxColorValue=255))
if (exists(“lastmean”)) {abline(v=lastmean, col = rgb(255, 0, 0, 50, maxColorValue=255)); prevlastmean <- lastmean;}
if (exists(“prevlastmean”)) {abline(v=prevlastmean, col = rgb(255, 0, 0, 25, maxColorValue=255))}
#Fix last mean calculation
lastmean <- mean(chunk)
}
})
chunk <- rnorm(100)+sqrt(abs((i)-51))
source('~/.active-rstudio-document')
source('~/Documents/shiny/animation.R')
source('~/Documents/shiny/animation.R')
source('~/Documents/shiny/animation.R')
source('~/Documents/shiny/animation.R')
install.packages("ImageMagick")
install.packages(c("glmnet", "lasso2", "plotrix"))
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
(datasets)
library(datasets)
data(swiss)
library(stats)
library(graphics)
pairs(swiss, panel=panel.smooth,main="Swiss Data",col=3+(swiss$Catholic>50))
library(datasets)
data(swiss)
library(stats)
library(graphics)
pairs(swiss, panel=panel.smooth,main="Swiss Data",col=3+(swiss$Catholic>50))
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <- spam[inTrain,]
inTrain
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~.,data=training,method="glm")
warnings()
modelFit
modelFit$finalModel
predictions <- predict(modelFit,newdata=testing)
predictions
confusionMatrix(predicitions,testing$type)
confusionMatrix(predictions,testing$type)
folds <- createFolds(y=spam$type,k=10,list=TRUE,returnTrain=TRUE)
folds
sapply(folds,length)
folds[[1]][1:10]
folds <- createFolds(y=spam$type,k=10,list=TRUE,returnTrain=FALSE)
sapply(folds,length)
set.seed(33333)
tme <- 1:1000
folds <- createTimeSlices(y=tme,initialWindow=20,horizon=10)
name(folds)
names(folds)
folds$train[[1]]
folds$test[[1]]
length(train)
lenght(folds)
length(folds)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~.,data=training,method="glm")
args(train.default)
args(trainControl)
library(ISLR)
install.packages("ISLR")
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <-Wage[inTrain]
testing <-Wage[-inTrain]
dim(training)
dim(testing)
dim(training); dim(testing)
training <-Wage[inTrain,]
testing <-Wage[-inTrain,]
dim(training); dim(testing)
plot="pairs")
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage,
plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qplot(age,wage,colour=education,data=training)
qq <- qplot(age,wage,colour=education,data=training)
qq + geom_smooth(method="lm",formula=y~x)
cutWage <- cut2(training$wage,g=3)
install.packages("Hmisc")
library(caret)
cutWage <- cut2(training$wage,g=3)
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(Hmisc)
cutWage <- cut2(training$wage,g=3)
table(cutWage)
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p1
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
p1
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p1
p2 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
p2
grid.arrange(p1,p2,ncol=2)
?grid
install.packages("gridExtra")
require(gridExtra)
grid.arrange(p1,p2,ncol=2)
t1 <- table(cutWage,training$jobclass)
t1
prop.table(t1,1)
qplot(wage,colou=education,data=training,geom="density")
qplot(wage,colour=education,data=training,geom="density")
getwd()
setwd("DataProducts")
setwd("/Users/bryantravissmith/Documents/DataProducts")
slidify()
library(slidify)
slidify()
slidify("Index.md")
ls
ls
slidify("Index.Rmd")
runDeck()
publish()
publish("bryantravissmith.github.io","bryantravissmith")
publish("DataProducts","bryantravissmith")
publish("DataProducts/DataProductsSub","bryantravissmith")
getwd()
